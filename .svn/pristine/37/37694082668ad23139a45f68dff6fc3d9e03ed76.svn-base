package br.intelidata.component;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EnumComponent 
{
    private static Map<Class<? extends AbstractEnumComponent>, Map<Object, AbstractEnumComponent>> cache = null;

    public EnumComponent() {}

    static 
    {
        cache = new HashMap<Class<? extends AbstractEnumComponent>, Map<Object, AbstractEnumComponent>>();
    }

    public static <T extends AbstractEnumComponent> T getPorId(Class<? extends T> tipo, Object id) 
    {
        cachearEnum(tipo);
        return (T) cache.get(tipo).get(id);
    }

    public static <T extends Enum> List<T> criarLista(Class<? extends T> classeEnum) 
    {
        T[] enumeracoes = classeEnum.getEnumConstants();
        List<T> lista = new ArrayList<T>(enumeracoes.length);
        for (T enumeracao : enumeracoes) {
            lista.add(enumeracao);
        }
        return lista;
    }

    private static void cachearEnum(Class<? extends AbstractEnumComponent> tipo) 
    {
        if (!cache.containsKey(tipo)) {
            AbstractEnumComponent[] enumeracoes = tipo.getEnumConstants();
            Map<Object, AbstractEnumComponent> valoresEnum = new HashMap<Object, AbstractEnumComponent>(enumeracoes.length);
            for (AbstractEnumComponent enumeracao : enumeracoes) {
                valoresEnum.put(enumeracao.getId(), enumeracao);
            }
            cache.put(tipo, valoresEnum);
        }
    }

    public static Object[] getArrayDeIds(Class<? extends AbstractEnumComponent> tipo) 
    {
        AbstractEnumComponent[] enumeracoes = tipo.getEnumConstants();
        List valoresEnum = new ArrayList();
        for (AbstractEnumComponent enumeracao : enumeracoes) {
            valoresEnum.add(enumeracao.getId());
        }
        return valoresEnum.toArray();
    }

}
