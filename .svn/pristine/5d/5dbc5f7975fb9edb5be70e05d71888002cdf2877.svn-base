package br.intelidata.component;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.sql.DataSource;
import org.jooq.DSLContext;
import org.jooq.InsertSetStep;
import org.jooq.Record;
import org.jooq.Result;
import org.jooq.SQLDialect;
import org.jooq.UpdateSetStep;
import org.jooq.impl.DSL;
import org.springframework.stereotype.Component;
import org.springframework.util.ReflectionUtils;
import br.intelidata.config.Entity;
import br.intelidata.entity.Atributo;
import br.intelidata.entity.BDDetail;
import br.intelidata.entity.BDIgnore;

@Component
public class DBUtilComponent 
{
    private Map<String, List<Atributo>> mapClasseAtributos;

    public DBUtilComponent() 
    {
        this.mapClasseAtributos = new HashMap<>();
    }

    public List<Atributo> getAtributos(Entity pojo) throws Exception 
    {
        if (mapClasseAtributos == null) {
            mapClasseAtributos = new HashMap<>();
        }
        List<Atributo> atributos = mapClasseAtributos.getOrDefault(pojo.getClass().getSimpleName(), new ArrayList<>());
        if (atributos.isEmpty()) {
            buscarAtributos(pojo.getClass(), atributos);
        }
        return atributos;
    }

    private void buscarAtributos(Class<?> classePojo, List<Atributo> atributos) throws Exception 
    {
        try {
            for (Field field : classePojo.getDeclaredFields()) {
                if (field.isAnnotationPresent(BDIgnore.class)) {
                    continue;
                }
                atributos.add(new Atributo(field.getName(), field.getDeclaringClass()));
            }
            if (!classePojo.getSuperclass().equals(Object.class)) {
                buscarAtributos(classePojo.getSuperclass(), atributos);
            }
        } catch (Exception e) {
            throw e;
        }
    }

    private Object getValorPojo(Entity pojo, Atributo atributo) throws Exception 
    {
        try {
            String metodo = atributo.getNome().substring(0, 1).toUpperCase() + atributo.getNome().substring(1);
            if (atributo.getClasse().isInstance(Boolean.class) || atributo.getClasse().isInstance(boolean.class)) {
                metodo = "is" + metodo;
            } else {
                metodo = "get" + metodo;
            }
            return pojo.getClass().getMethod(metodo).invoke(pojo);
        } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException | NoSuchMethodException | SecurityException e) {
            throw new Exception("Nãoi foi possível recuperar o valor do atributo " + atributo.getNome() + " no POJO " + pojo.getClass().getName(), e);
        }
    }

    public void incluirObjeto(DataSource dataSource, Entity pojo) throws Exception 
    {
        List<Atributo> atributos = getAtributos(pojo);
        Map<org.jooq.Field<Object>, Object> camposValoresInsert = new HashMap<>();
        for (Atributo atributo : atributos) {
            Object obj = getValorPojo(pojo, atributo);
            if (obj != null) {
                camposValoresInsert.put(DSL.field(atributo.getNome()), obj);
            }
        }

        try (DSLContext create = DSL.using(dataSource.getConnection(), SQLDialect.POSTGRES)) {
        	InsertSetStep<Record> insert = create.insertInto(DSL.table(pojo.getClass().getSimpleName().toLowerCase()));
            Result<Record> resultado = insert.set(camposValoresInsert).returning(DSL.field("id")).fetch();
//              insert.set(camposValoresInsert).execute();
            
            FileLogComponent.getInstance().write("id "+resultado.getValue(0, "id"));
            Long id = (Long) resultado.getValue(0, "id");
            pojo.setId(id);
        } catch (SQLException e) {
        	throw new Exception("Não foi possível inserir o objeto " + pojo.getClass().getName(), e);
        }
    }
    
    public void atualizarObjeto(DataSource dataSource, Entity pojo, ArrayList<String> skipe) throws Exception 
    {
        List<Atributo> atributos = getAtributos(pojo);
        Map<org.jooq.Field<Object>, Object> camposValoresInsert = new HashMap<>();
        for (Atributo atributo : atributos) {
        	
        	String field = atributo.getNome().toString();
        	
        	// analise para verificar se existe algum field que nao deve ser persistido,
        	// nesse caso é realizado uma rotina de verificação para os campos com o depara do pojo e parametros do skipe.
        	boolean permissionScape = false;
        	if(skipe != null){
        		for(String single : skipe){
        			if(String.valueOf(single).toLowerCase().trim() ==
        								String.valueOf(field).toLowerCase().trim()){
        				permissionScape = true;
        			}
        		}
        	}
        	if(true == permissionScape){
        		continue;
        	}
        	
            Object obj = getValorPojo(pojo, atributo);
            if (obj != null) {
                camposValoresInsert.put(DSL.field(field), obj);
            }
        }

        try {
        	 DSLContext create = DSL.using(dataSource.getConnection(), SQLDialect.POSTGRES);
             int execute = create.update(DSL.table(pojo.getClass().getSimpleName().toLowerCase()))
		             .set(camposValoresInsert)
		             .where("id = ?", pojo.getId())
		             .execute();
             
        } catch (SQLException e) {
            throw new Exception("Não foi possível atualizar o objeto " + pojo.getClass().getName(), e);
        }
    }

    @SuppressWarnings("unchecked")
    public <E extends Entity> E buscar(DataSource dataSource, Class<?> classePojo, String where) 
    {	
        try{
        	DSLContext create = DSL.using(dataSource.getConnection(), SQLDialect.POSTGRES);
        	E e = (E) create.select().from(classePojo.getSimpleName().toLowerCase()).where(where).fetchAny().into(classePojo);
            if (e != null) {
                for (Field field : classePojo.getDeclaredFields()) {
                    BDDetail bdDetail = field.getAnnotation(BDDetail.class);
                    if (bdDetail != null) {
                        AbstractDataSourceComponent<E> regraNegocio = (AbstractDataSourceComponent<E>) bdDetail.rn().newInstance();
                        String whereDetail = bdDetail.campoWhere();
                        if (whereDetail.isEmpty()) {
                            whereDetail = "id" + classePojo.getSimpleName();
                        }
                        whereDetail += " = " + e.getId();
                        field.setAccessible(true);
                        ReflectionUtils.setField(field, e, regraNegocio.buscarListaDetail(dataSource, whereDetail));
                    }
                }
            }
            return e;
        } catch (SQLException | InstantiationException | IllegalAccessException e1) {
        	throw new RuntimeException("Não foi possível selecionar o objeto " + classePojo.getName(), e1);
        }
    }

    public <E> List<E> buscarLista(DataSource dataSource, Class classePojo, String where) 
    {
        try (DSLContext create = DSL.using(dataSource.getConnection(), SQLDialect.POSTGRES)) {
            return create.select().from(classePojo.getSimpleName().toLowerCase()).where(where).fetchInto(classePojo);
        } catch (SQLException e) {
            throw new RuntimeException("Não foi possível selecionar o objeto " + classePojo.getName(), e);
        }
    }
}
