package br.intelidata.component;

import java.security.InvalidKeyException;
import java.util.Random;

public class EncryptionComponent 
{
    class RandomGenerator 
    {}

    public EncryptionComponent() 
    {}

    public static String encrypt64(String s, String s1) 
    {
        if (s1.length() != 32) {
            throw new RuntimeException("Invalid key");
        }
        try {
        	
        	String temp = new String(CodecsComponent.base64Encode(
        				encrypt(s.getBytes(), TwofishAlgorithmComponent.makeKey(convertKey(s1)))
        			));
        	
            return temp;
        } catch (InvalidKeyException invalidkeyexception) {
            System.err.println(invalidkeyexception);
            throw new RuntimeException(invalidkeyexception.getMessage());
        }
    }

    private static byte[] convertKey(String s) 
    {
        byte abyte0[] = new byte[s.length() / 2];
        int i = 0;
        for (int j = 0; i < s.length(); j++) {
            abyte0[j] = (byte) (toHexa(s.charAt(i)) * 16 + toHexa(s.charAt(i + 1)));
            i += 2;
        }

        return abyte0;
    }

    private static byte toHexa(char c) 
    {
        byte byte0;
        if (c >= '0' && c <= '9') {
            byte0 = (byte) (c - 48);
        } else if (c >= 'a' && c <= 'f') {
            byte0 = (byte) ((c - 97) + 10);
        } else if (c >= 'A' && c <= 'F') {
            byte0 = (byte) ((c - 65) + 10);
        } else {
            throw new InternalError("invalid key " + c);
        }
        return byte0;
    }

    public static String encrypt16(String s, String s1) 
    {
        return "";
    }

    public static String decrypt16(String s, String s1) 
    {
        return "";
    }

    public static String decrypt64(String s, String s1) 
    {
        if (s1.length() != 32) {
            throw new RuntimeException("Invalid key");
        }
        s = UtilComponent.rtrim(s);
        try {
            return UtilComponent.rtrim(new String(decrypt(CodecsComponent.base64Decode(s.getBytes()), TwofishAlgorithmComponent.makeKey(convertKey(s1)))));
        } catch (InvalidKeyException invalidkeyexception) {
            System.err.println(invalidkeyexception);
            throw new RuntimeException(invalidkeyexception.getMessage());
        } catch (ArrayIndexOutOfBoundsException arrayindexoutofboundsexception) {
            return "";
        }
    }

    public static int getCheckSumLength() 
    {
        return 6;
    }

    public static String calcChecksum(String s, int i, int j, int k) 
    {
        int l = 0;
        for (int i1 = i; i1 < j; i1++) {
            l += s.charAt(i1);
        }

        return UtilComponent.padl(UtilComponent.upper(Integer.toHexString(l)), k, "0");
    }

    public static String checksum(String s, int i) 
    {
        return calcChecksum(s, 0, s.length(), i);
    }

    public static String addchecksum(String s, int i) 
    {
        return s + calcChecksum(s, 0, s.length(), i);
    }

    public static String getNewKey() 
    {
        char ac[] = new char[32];
        byte abyte0[] = new byte[16];
        random.nextBytes(abyte0);
        int i = 0;
        int j = 0;
        while (i < 16) {
            byte byte0 = abyte0[i++];
            ac[j++] = HEX_DIGITS[byte0 >>> 4 & 0xf];
            ac[j++] = HEX_DIGITS[byte0 & 0xf];
        }
        return new String(ac);
    }

    public static byte[] encrypt(byte abyte0[], Object obj) 
    {
        int i = 0;
        if (abyte0.length % 16 != 0) {
            i = 16 - abyte0.length % 16;
        }
        byte abyte1[] = new byte[abyte0.length + i];
        byte abyte2[] = new byte[abyte1.length];
        System.arraycopy(abyte0, 0, abyte1, 0, abyte0.length);
        for (int j = 0; j < i; j++) {
            abyte1[abyte0.length + j] = 32;
        }

        int k = abyte1.length / 16;
        for (int l = 0; l < k; l++) {
            System.arraycopy(TwofishAlgorithmComponent.blockEncrypt(abyte1, l * 16, obj), 0, abyte2, l * 16, 16);
        }

        return abyte2;
    }

    private static String toString(byte abyte0[]) 
    {
        return toString(abyte0, 0, abyte0.length);
    }

    private static String toString(byte abyte0[], int i, int j) 
    {
        char ac[] = new char[j * 2];
        int k = i;
        int l = 0;
        while (k < i + j) {
            byte byte0 = abyte0[k++];
            ac[l++] = HEX_DIGITS[byte0 >>> 4 & 0xf];
            ac[l++] = HEX_DIGITS[byte0 & 0xf];
        }
        return new String(ac);
    }

    public static byte[] decrypt(byte abyte0[], Object obj) 
    {
        byte abyte1[] = new byte[abyte0.length];
        int i = abyte0.length / 16;
        for (int j = 0; j < i; j++) {
            System.arraycopy(TwofishAlgorithmComponent.blockDecrypt(abyte0, j * 16, obj), 0, abyte1, j * 16, 16);
        }

        return abyte1;
    }
    private static final int CHECKSUM_LENGTH = 6;
    private static final char HEX_DIGITS[] = {
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
        'A', 'B', 'C', 'D', 'E', 'F'
    };
    static Random random = new Random();
}
