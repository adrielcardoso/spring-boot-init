package br.intelidata.component;

import java.io.UnsupportedEncodingException;

public class CodecsComponent 
{
    private CodecsComponent()
    {}

    public static final String base64Encode(String s)
    {
        if(s == null)
            return null;
        try
        {
            return new String(base64Encode(s.getBytes("8859_1")), "8859_1");
        }
        catch(UnsupportedEncodingException unsupportedencodingexception)
        {
            throw new Error(unsupportedencodingexception.toString());
        }
    }

    public static final byte[] base64Encode(byte abyte0[])
    {
        if(abyte0 == null)
            return null;
        byte abyte1[] = new byte[((abyte0.length + 2) / 3) * 4];
        int i = 0;
        int j = 0;
        for(; i < abyte0.length - 2; i += 3)
        {
            abyte1[j++] = Base64EncMap[abyte0[i] >>> 2 & 0x3f];
            abyte1[j++] = Base64EncMap[abyte0[i + 1] >>> 4 & 0xf | abyte0[i] << 4 & 0x3f];
            abyte1[j++] = Base64EncMap[abyte0[i + 2] >>> 6 & 3 | abyte0[i + 1] << 2 & 0x3f];
            abyte1[j++] = Base64EncMap[abyte0[i + 2] & 0x3f];
        }

        if(i < abyte0.length)
        {
            abyte1[j++] = Base64EncMap[abyte0[i] >>> 2 & 0x3f];
            if(i < abyte0.length - 1)
            {
                abyte1[j++] = Base64EncMap[abyte0[i + 1] >>> 4 & 0xf | abyte0[i] << 4 & 0x3f];
                abyte1[j++] = Base64EncMap[abyte0[i + 1] << 2 & 0x3f];
            } else
            {
                abyte1[j++] = Base64EncMap[abyte0[i] << 4 & 0x3f];
            }
        }
        for(; j < abyte1.length; j++)
            abyte1[j] = 61;

        return abyte1;
    }

    public static final String base64Decode(String s)
    {
        if(s == null)
            return null;
        try
        {
            return new String(base64Decode(s.getBytes("8859_1")), "8859_1");
        }
        catch(UnsupportedEncodingException unsupportedencodingexception)
        {
            throw new Error(unsupportedencodingexception.toString());
        }
    }

    @SuppressWarnings("empty-statement")
    public static final byte[] base64Decode(byte abyte0[])
    {
        if(abyte0 == null)
            return null;
        int i;
        for(i = abyte0.length; abyte0[i - 1] == 61; i--);
        byte abyte1[] = new byte[i - abyte0.length / 4];
        for(int j = 0; j < abyte0.length; j++)
            abyte0[j] = Base64DecMap[abyte0[j]];

        int k = 0;
        int l;
        for(l = 0; l < abyte1.length - 2; l += 3)
        {
            abyte1[l] = (byte)(abyte0[k] << 2 & 0xff | abyte0[k + 1] >>> 4 & 3);
            abyte1[l + 1] = (byte)(abyte0[k + 1] << 4 & 0xff | abyte0[k + 2] >>> 2 & 0xf);
            abyte1[l + 2] = (byte)(abyte0[k + 2] << 6 & 0xff | abyte0[k + 3] & 0x3f);
            k += 4;
        }

        if(l < abyte1.length)
            abyte1[l] = (byte)(abyte0[k] << 2 & 0xff | abyte0[k + 1] >>> 4 & 3);
        if(++l < abyte1.length)
            abyte1[l] = (byte)(abyte0[k + 1] << 4 & 0xff | abyte0[k + 2] >>> 2 & 0xf);
        return abyte1;
    }

    public static final String URLDecode(String s)
    {
        if(s == null)
            return null;
        char ac[] = new char[s.length()];
        int i = 0;
        for(int j = 0; j < s.length(); j++)
        {
            char c = s.charAt(j);
            if(c == '+')
                ac[i++] = ' ';
            else
            if(c == '%')
                try
                {
                    ac[i++] = (char)Integer.parseInt(s.substring(j + 1, j + 3), 16);
                    j += 2;
                }
                catch(NumberFormatException numberformatexception)
                {
                    System.err.println(s.substring(j, j + 3) + " is an invalid code");
                }
            else
                ac[i++] = c;
        }

        return String.valueOf(ac, 0, i);
    }

    private static byte Base64EncMap[];
    private static byte Base64DecMap[];

    static
    {
        byte abyte0[] = {
            65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
            75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
            85, 86, 87, 88, 89, 90, 97, 98, 99, 100,
            101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
            111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
            121, 122, 48, 49, 50, 51, 52, 53, 54, 55,
            56, 57, 43, 47
        };
        Base64EncMap = abyte0;
        Base64DecMap = new byte[128];
        for(int i = 0; i < Base64EncMap.length; i++)
            Base64DecMap[Base64EncMap[i]] = (byte)i;

    }
}
