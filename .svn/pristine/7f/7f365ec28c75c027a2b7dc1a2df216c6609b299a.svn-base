package br.intelidata.controllers;

import javax.sql.DataSource;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import br.intelidata.component.FileLogComponent;
import br.intelidata.component.LogComponent;
import br.intelidata.component.ResponseComponent;
import br.intelidata.config.Entity;
import br.intelidata.entity.UsuarioSite;
import br.intelidata.exception.FormErrorException;
import br.intelidata.service.UsuarioSiteService;

@RestController
public class UsuarioSiteController 
{
	@Autowired
    private DataSource dataSource;
    
    @Autowired
    private LogComponent logComponent;
    
    
    // parse create
	@RequestMapping(
    		value="/usuario", 
    		method = RequestMethod.POST)
	public Entity runCreate(
			@RequestBody 
			@Valid UsuarioSite usuarioSite, 
			BindingResult bindingResult)
	{
		try{
			if(bindingResult.hasErrors()){
				throw new FormErrorException("O Formul치rio contem erro, favor validar os campos obrigat칩rios");
			}
			return UsuarioSiteService.parseCreate(dataSource, logComponent, usuarioSite);
		}catch(Exception e){
			FileLogComponent.getInstance().write(e.getMessage());
    		return new ResponseComponent().handleResourceNotFoundException(
					400, e.getMessage());
		}
	}
	
	
	// parse update
	@RequestMapping(
    		value="/usuario", 
    		method = RequestMethod.PUT)
	public Entity runUpdate(
			@RequestBody 
			@Valid UsuarioSite usuarioSite, 
			BindingResult bindingResult)
	{
		try{
			if(bindingResult.hasErrors()){
				throw new FormErrorException("O Formul치rio contem erro, favor validar os campos obrigat칩rios");
			}
			return UsuarioSiteService.parseUpdate(dataSource, logComponent, usuarioSite);
		}catch(Exception e){
			FileLogComponent.getInstance().write(e.getMessage());
    		return new ResponseComponent().handleResourceNotFoundException(
					400, e.getMessage());
		}
	}
	
	// parse delete
	@RequestMapping(
    		value="/usuario/{id}", 
    		method = RequestMethod.DELETE)
	public Entity runDelete(
			@PathVariable("id") String id)
	{
		try{
			return UsuarioSiteService.parseDelete(dataSource, logComponent, id);
		}catch(Exception e){
			FileLogComponent.getInstance().write(e.getMessage());
    		return new ResponseComponent().handleResourceNotFoundException(
					400, e.getMessage());
		}
	}
	
	// parse find by id
	@RequestMapping(
    		value="/usuario/{id}", 
    		method = RequestMethod.GET)
	public Entity runGet(
			@PathVariable("id") String id)
	{
		try{
			FileLogComponent.getInstance().write("00");
			return UsuarioSiteService.parseFindById(dataSource, logComponent, id);
		}catch(Exception e){
			FileLogComponent.getInstance().write(e.getMessage());
    		return new ResponseComponent().handleResourceNotFoundException(
					400, e.getMessage());
		}
	}
	
}
