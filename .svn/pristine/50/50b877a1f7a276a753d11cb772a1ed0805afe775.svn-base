package br.intelidata.service;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.math.BigDecimal;
import br.intelidata.config.Service;

public class BeanUtilService extends Service 
{
    public static <E extends Object> E get(Object objeto, String atributo) throws Exception {

        if (atributo.equals("this")) {
            return (E) objeto;
        }

        Object result = null;

        try {

            int index = atributo.indexOf('.');
            if (index > -1) {
                objeto = get(objeto, atributo.substring(0, index));
                if (objeto != null) {
                    result = get(objeto, atributo.substring(index + 1));
                }
            } else {
                Method metodo = null;
                try {
                    metodo = objeto.getClass().getMethod(getNomeMetodo(atributo, TipoMetodo.GET));
                } catch (NoSuchMethodException e) {
                    metodo = objeto.getClass().getMethod(getNomeMetodo(atributo, TipoMetodo.IS));
                }
                result = metodo.invoke(objeto);
            }

        } catch (IllegalAccessException | IllegalArgumentException | NoSuchMethodException | SecurityException | InvocationTargetException ex) {
            throw new Exception(ex.getMessage());
        }
        return (E) result;
    }

    public static void set(Object objeto, String atributo, Object value) throws Exception {

        try {

            int index = atributo.indexOf('.');

            if (index > -1) {
                objeto = get(objeto, atributo.substring(0, index));
                if (objeto != null) {
                    if (value != null && value instanceof BigDecimal) {
                        Class tipoRetorno = getTipoRetornoMetodo(objeto, atributo);
                        if (tipoRetorno == Integer.class || tipoRetorno == int.class) {
                            value = ((BigDecimal) value).intValue();
                        } else if (tipoRetorno == Long.class || tipoRetorno == long.class) {
                            value = ((BigDecimal) value).longValue();
                        }
                    }
                    set(objeto, atributo.substring(index + 1), value);
                }
            } else {
                Method metodo = objeto.getClass().getMethod(getNomeMetodo(atributo, TipoMetodo.SET), getTipoRetornoMetodo(objeto, atributo));
                metodo.invoke(objeto, value);
            }
        } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException | NoSuchMethodException | SecurityException ex) {
            throw new Exception(ex.getMessage());
        }
    }

    public static Class<?> getTipoRetornoMetodoRecursivo(Object bean, String atributo) throws Exception {
        Class<?> tipoRetorno = null;

        int index = atributo.indexOf('.');
        if (index > -1) {
            bean = get(bean, atributo.substring(0, index));
            tipoRetorno = getTipoRetornoMetodoRecursivo(bean, atributo.substring(index + 1));
        } else {
            if (bean != null) {
                tipoRetorno = getTipoRetornoMetodo(bean, atributo);
            }
        }
        return tipoRetorno;
    }

    private static Class<?> getTipoRetornoMetodo(Object bean, String atributo) throws Exception {

        Class<?> tipoRetorno = null;

        try {
            Method metodo = bean.getClass().getMethod(getNomeMetodo(atributo, TipoMetodo.GET));
            tipoRetorno = metodo.getReturnType();
        } catch (NoSuchMethodException e) {
            try {
                Method metodo = bean.getClass().getMethod(getNomeMetodo(atributo, TipoMetodo.IS));
                tipoRetorno = metodo.getReturnType();
            } catch (NoSuchMethodException ex) {
                throw new Exception(ex.getMessage());
            }
        }

        return tipoRetorno;
    }

    private static String getNomeMetodo(String atributo, TipoMetodo tipoMetodo) {
        atributo = atributo.substring(0, 1).toUpperCase() + atributo.substring(1);
        if (TipoMetodo.GET.equals(tipoMetodo)) {
            return "get" + atributo;
        } else if (TipoMetodo.IS.equals(tipoMetodo)) {
            return "is" + atributo;
        } else {
            return "set" + atributo;
        }
    }

    private enum TipoMetodo {
        IS,
        GET,
        SET;
    }

    public static <E> void copiarValores(E origem, E destino, boolean copiarNulo, CopiarValoresListenerService copiarValoresListener) throws Exception {
        try {
            for (Field atributo : origem.getClass().getDeclaredFields()) {
                if (Modifier.isStatic(atributo.getModifiers())) {
                    continue;
                }

                Object valor = get(origem, atributo.getName());
                if (valor == null && !copiarNulo) {
                    continue;
                }

                boolean achouCampo = true;
                try {
                    destino.getClass().getDeclaredField(atributo.getName());
                } catch (NoSuchFieldException e) {
                    achouCampo = false;
                }

                if (!achouCampo) {
                    if (copiarValoresListener != null) {
                        copiarValoresListener.valorNaoEncontrado(origem, destino, atributo.getName(), valor);
                    }
                } else {
                    set(destino, atributo.getName(), get(origem, atributo.getName()));
                    if (copiarValoresListener != null) {
                        copiarValoresListener.copiandoValor(origem, destino, atributo.getName(), valor);
                    }
                }
            }
        } catch (SecurityException e) {
            throw new Exception(e.getMessage());            
        }
    }
}
